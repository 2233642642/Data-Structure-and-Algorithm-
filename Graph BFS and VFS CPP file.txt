#include "Graph.h"

Graph::Graph(int vertices) {
    this->vertices = vertices;
    adjList.resize(vertices);
}

void Graph::addEdge(int v, int w) {
    adjList[v].push_back(w);
    adjList[w].push_back(v); // Assuming an undirected graph
}

void Graph::BFS(int startVertex) {
    std::vector<bool> visited(vertices, false);
    std::queue<int> queue;

    visited[startVertex] = true;
    queue.push(startVertex);

    while (!queue.empty()) {
        int vertex = queue.front();
        std::cout << vertex << " ";
        queue.pop();

        for (auto i = adjList[vertex].begin(); i != adjList[vertex].end(); ++i) {
            if (!visited[*i]) {
                visited[*i] = true;
                queue.push(*i);
            }
        }
    }
    std::cout << std::endl;
}

void Graph::DFS(int startVertex) {
    std::vector<bool> visited(vertices, false);
    DFSUtil(startVertex, visited);
    std::cout << std::endl;
}

void Graph::DFSUtil(int vertex, std::vector<bool>& visited) {
    visited[vertex] = true;
    std::cout << vertex << " ";

    for (auto i = adjList[vertex].begin(); i != adjList[vertex].end(); ++i) {
        if (!visited[*i]) {
            DFSUtil(*i, visited);
        }
    }
}
